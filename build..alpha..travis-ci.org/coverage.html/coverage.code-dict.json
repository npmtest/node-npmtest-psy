{"/home/travis/build/npmtest/node-npmtest-psy/test.js":"/* istanbul instrument in package npmtest_psy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-psy/lib.npmtest_psy.js":"/* istanbul instrument in package npmtest_psy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_psy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_psy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-psy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-psy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_psy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_psy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_psy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_psy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_psy.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_psy.__dirname + '/lib.npmtest_psy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-psy/node_modules/psy/index.js":"var defined = require('defined')\nvar fs = require('fs')\nvar randomBytes = require('crypto').randomBytes\nvar path = require('path')\nvar configDir = require('xdg-basedir').config\nvar mkdirp = require('mkdirp')\nvar xtend = require('xtend')\n\nvar autod = require('auto-daemon')\nvar listen = require('auto-daemon/listen')\n\nvar METHODS = [\n  'start', 'stop', 'restart', 'remove', 'list', 'log:s',\n  'close', 'kill', 'reset'\n]\n\nmodule.exports = Psy\n\nfunction Psy (args) {\n  if (!(this instanceof Psy)) return new Psy(args)\n  args = args || {}\n  this.opts = defaults(args)\n}\n\nPsy.prototype.run = function (cb) {\n  this.opts.autoclose = true\n  this.opts.args.splice(-1, 1, '--autoclose')\n  autod(xtend(this.opts, { autoclose: false }), cb)\n}\n\nPsy.prototype.server = function (cb) {\n  var self = this\n  self.opts.args.splice(-1, 1, '--no-autoclose')\n  self.opts.autoclose = false\n  var server = listen(require('./server.js'), self.opts)\n  server.once('listening', function () {\n    autod(self.opts, function (err, r, c) {\n      c.end()\n      cb(err)\n    })\n  })\n}\n\nPsy.prototype.start = function (cmd, args, cb) {\n  var self = this\n  var name = defined(args.name, randomBytes(4).toString('hex'))\n  var opts = {\n    cwd: defined(args.cwd, process.cwd()),\n    env: args.env,\n    maxRestarts: defined(args.maxRestarts, -1),\n    sleep: defined(args.sleep, 0),\n    logfile: args.logfile\n  }\n  self.run(function (err, r, c) {\n    if (err) return cb(err)\n    r.start(name, cmd, opts, function (err) {\n      c.end()\n      cb(err)\n    })\n  })\n}\n\nPsy.prototype.log = function (name, opts, cb) {\n  this.run(function (err, r, c) {\n    if (err) return cb(err)\n    var stream = r.log(name, opts)\n    stream.on('end', function () { c.end() })\n    cb(null, stream)\n  })\n}\n\nPsy.prototype.stop = function (name, cb) { this._run('stop', [name], cb) }\nPsy.prototype.restart = function (name, cb) { this._run('restart', [name], cb) }\nPsy.prototype.remove = function (name, cb) { this._run('remove', [name], cb) }\nPsy.prototype.kill = function (cb) { this._run('kill', [], cb) }\nPsy.prototype.close = function (cb) { this._run('close', [], cb) }\nPsy.prototype.list = function (cb) {\n  this.run(function (err, r, c) {\n    if (err) return cb(err)\n    r.list(function (err, items) {\n      cb(err, items)\n      c.end()\n    })\n  })\n}\n\nPsy.prototype.pid = function (cb) {\n  var self = this\n  fs.readFile(self.opts.pidfile, 'utf8', function (err, pid) {\n    if (err) return cb(err)\n    try {\n      process.kill(Number(pid), 0)\n    } catch (err) {\n      return cb(null, 0)\n    }\n    return cb(null, pid)\n  })\n}\n\nPsy.prototype.reset = function (cb) {\n  var self = this\n  self.run(function (err, r, c) {\n    if (err) return cb(err)\n    fs.unlink(self.opts.statefile, function () {\n      r.reset(function () {\n        c.end()\n        cb()\n      })\n    })\n  })\n}\n\nPsy.prototype._run = function (cmd, args, cb) {\n  this.run(function (err, r, c) {\n    if (err) return cb(err)\n    var done = function (err) {\n      c.end()\n      cb(err)\n    }\n    args.push(done)\n    r[cmd].apply(r, args)\n  })\n}\n\nvar defaults = function (args) {\n  var psyPath = defined(args.psypath, process.env.PSY_PATH, path.join(configDir, 'psy'))\n  var sockfile = defined(\n    args.sockfile, process.env.PSY_SOCKFILE,\n    path.join(psyPath, 'sock')\n  )\n  var pidfile = defined(\n    args.pidfile, process.env.PSY_PIDFILE,\n    path.join(psyPath, 'pid')\n  )\n  var statefile = defined(\n    args.statefile, process.env.PSY_STATEFILE,\n    path.join(psyPath, 'state')\n  )\n  var rpcfile = defined(\n    args.rpcfile, process.env.PSY_RPCFILE,\n    path.join(__dirname, 'server.js')\n  )\n\n  mkdirp.sync(path.dirname(sockfile))\n\n  var opts = {\n    rpcfile: rpcfile,\n    statefile: statefile,\n    sockfile: sockfile,\n    pidfile: pidfile,\n    methods: METHODS,\n    debug: args.debug,\n    autoclose: true,\n    args: [\n      '--sockfile', sockfile,\n      '--pidfile', pidfile,\n      '--statefile', statefile,\n      '--autoclose'\n    ]\n  }\n  return opts\n}\n","/home/travis/build/npmtest/node-npmtest-psy/node_modules/psy/cmd.js":"#!/usr/bin/env node\n\nvar fs = require('fs')\nvar path = require('path')\n\nvar minimist = require('minimist')\nvar argv = minimist(process.argv.slice(2), {\n  alias: { h: 'help', s: 'sockfile', l: 'logfile', f: 'follow' },\n  boolean: [ 'f', 'debug', 'all' ]\n})\nvar cmd = argv._[0]\nif (cmd === 'help' || argv.help) return usage(0)\n\nvar defined = require('defined')\nvar timeago = require('timeago.js')()\nvar table = require('text-table')\nvar configDir = require('xdg-basedir').config\nvar randomBytes = require('crypto').randomBytes\n\nif (cmd === 'version' || (!cmd && argv.version)) {\n  return console.log(require('./package.json').version)\n}\n\nvar psy = require('./index.js')(argv)\n\nif (cmd === 'server') {\n  psy.server(function (err) {\n    if (err) error(err)\n  })\n  return\n}\n\nif (cmd === 'start') {\n  var name = defined(argv.name, argv.n, randomBytes(4).toString('hex'))\n  var opts = {\n    cwd: defined(argv.cwd, process.cwd()),\n    env: argv.env,\n    maxRestarts: defined(argv.maxRestarts, -1),\n    sleep: defined(argv.sleep, 0),\n    logfile: argv.logfile,\n    name: name\n  }\n  psy.start(argv._.slice(1), opts, function (err) {\n    if (err && err.info) error(err.info)\n    else if (err) error(err)\n    else if (!argv.name && !argv.n) console.log(name)\n    process.exit()\n  })\n} else if (cmd === 'stop') {\n  var name = defined(argv.name, argv.n, argv._[1])\n  psy.stop(name, function (err) {\n    if (err) error(err)\n  })\n} else if (cmd === 'restart') {\n  if (argv.all) {\n    psy.list(function(err, items) {\n      if (err) error(err)\n      else items.forEach(function (item) {\n        psy.restart(item.id, function (err) {\n          if (err) error(err)\n        })\n      })\n    })\n  } else {\n    var name = defined(argv.name, argv.n, argv._[1])\n    psy.restart(name, function (err) {\n      if (err) error(err)\n    })\n  }\n} else if (cmd === 'rm' || cmd === 'remove') {\n  var name = defined(argv.name, argv.n, argv._[1])\n  psy.remove(name, function (err) {\n    if (err) error(err)\n  })\n} else if (cmd === 'list' || cmd === 'ls') {\n  psy.list(function (err, items) {\n    if (err) console.error(err)\n    else process.stdout.write(formatList(items))\n  })\n} else if (cmd === 'log') {\n  var name = defined(argv.name, argv._[1])\n  psy.log(name, {\n    n: argv.n,\n    N: argv.N,\n    follow: argv.follow\n  }, function (err, stream) {\n    if (err) return error(err)\n    stream.pipe(process.stdout)\n  })\n} else if (cmd === 'daemon') {\n  psy.run(function (err) {\n    if (err) error(err)\n  })\n} else if (cmd === 'pid') {\n  psy.pid(function (err, pid) {\n    if (err) return error(err)\n    console.log(pid)\n  })\n} else if (cmd === 'close') {\n  psy.close(function (err) {\n    if (err) error(err)\n  })\n} else if (cmd === 'kill') {\n  psy.kill(function (err) {\n    if (err) error(err)\n   })\n} else if (cmd === 'reset') {\n  psy.reset(function (err) {\n    if (err) error(err)\n  })\n} else usage(1)\n\nfunction usage (code) {\n  var r = fs.createReadStream(path.join(__dirname, 'usage.txt'))\n  if (code) r.once('end', function () { process.exit(code) })\n  r.pipe(process.stdout)\n}\n\nfunction formatList (items) {\n  if (argv.json) {\n    return items.map(function (item) {\n      return JSON.stringify(item) + '\\n'\n    }).join('')\n  }\n  return table(items.map(function (item) {\n    return [\n      item.id, item.status, item.pid === undefined ? '---' : item.pid,\n      item.started ? timeago.format(new Date(item.started)) : '---',\n      item.command.join(' ')\n    ]\n  })) + (items.length ? '\\n' : '')\n}\n\nfunction error (err) {\n  console.error(err.stack || err)\n  process.exit(1)\n}\n","/home/travis/build/npmtest/node-npmtest-psy/node_modules/psy/server.js":"var respawn = require('respawn-group')\nvar xtend = require('xtend')\nvar mkdirp = require('mkdirp')\nvar minimist = require('minimist')\nvar onend = require('end-of-stream')\nvar sliceFile = require('slice-file')\nvar once = require('once')\nvar fs = require('fs')\nvar defined = require('defined')\nvar through = require('through2')\nvar has = require('has')\nvar sprintf = require('sprintf')\nvar inherits = require('inherits')\nvar EventEmitter = require('events').EventEmitter\n\nvar connected = 0\nvar psy = null\n\nmodule.exports = function (server, stream, args) {\n  var argv = minimist(args)\n  if (!psy) psy = new Psy(argv)\n  psy.on('error', onerror)\n  connected++\n  onend(stream, function () {\n    psy.removeListener('error', onerror)\n    connected--\n    if (!argv.autoclose) return\n    if (connected === 0 && psy.group.list().length === 0) {\n      setTimeout(function () {\n        if (connected !== 0) return\n        if (psy.group.list().length > 0) return\n        server.close()\n      }, 1000)\n    }\n  })\n  function onerror (err) { stream.emit('error', err) }\n\n  return {\n    start: psy.start.bind(psy),\n    stop: psy.stop.bind(psy),\n    restart: psy.restart.bind(psy),\n    remove: psy.remove.bind(psy),\n    log: psy.log.bind(psy),\n    list: psy.list.bind(psy),\n    close: function (cb) {\n      if (typeof cb !== 'function') cb = noop\n      psy.group.list().forEach(function (item) {\n        psy.group.remove(item.id)\n      })\n      server.close()\n      cb()\n    },\n    reset: function (cb) {\n      if (typeof cb !== 'function') cb = noop\n      server.close()\n      var pending = 3\n      fs.unlink(psy.pidfile, done)\n      fs.unlink(psy.sockfile, done)\n      fs.unlink(psy.statefile, done)\n      function done (err) {\n        if (err) cb(err)\n        else if (--pending === 0) cb()\n      }\n    },\n    kill: function (cb) {\n      server.close()\n      cb()\n      process.exit()\n    }\n  }\n}\n\ninherits(Psy, EventEmitter)\n\nfunction Psy (opts) {\n  if (!(this instanceof Psy)) return new Psy(opts)\n  var self = this\n\n  self.sockfile = opts.sockfile\n  self.pidfile = opts.pidfile\n  self.statefile = opts.statefile\n  self.psyPath = opts.psyPath\n\n  self.group = respawn()\n  self.extra = {}\n  self.logging = {}\n  self.linestate = {}\n  self.group.on('stdout', self._ondata.bind(self))\n  self.group.on('stderr', self._ondata.bind(self))\n\n  self.group.on('start', self._onev('start'))\n  self.group.on('stop', self._onev('stop'))\n  self.group.on('restart', self._onev('restart'))\n  self.group.on('crash', self._onev('crash'))\n  self.group.on('sleep', self._onev('sleep'))\n  self.group.on('spawn', self._onev('spawn', 'PID %d', 'pid'))\n  self.group.on('exit', self._onev('exit', '%s'))\n  self.group.on('warn', self._onev('warn', '%s'))\n\n  self._readState(function (err, state) {\n    if (err) return self.emit('error', err)\n    state.forEach(function (e) {\n      self.extra[e.id] = e.extra\n      self.start(e.id, e.command, {\n        cwd: e.cwd,\n        env: e.env,\n        logfile: e.logfile,\n        maxRestarts: e.maxRestarts,\n        sleep: e.sleep\n      })\n    })\n  })\n\n  fs.readFile(self.pidfile, function (err, src) {\n    if (err || Number(src) !== process.pid) {\n      fs.writeFile(self.pidfile, String(process.pid))\n    }\n  })\n}\n\nPsy.prototype._onev = function (name, fmt) {\n  var self = this\n  name = name.toUpperCase()\n  var props = [].slice.call(arguments, 2)\n\n  return function (mon) {\n    if (!has(self.logging, mon.id)) return\n    var outputs = self.logging[mon.id]\n    var args = [].slice.call(arguments, 1)\n    for (var i = 0; i < props.length; i++) {\n      args[i] = args[i][props[i]]\n    }\n\n    outputs.forEach(function (out) {\n      var pre = (self.linestate[mon.id] ? '' : '\\n') + '!!! PROCESS '\n      if (fmt) {\n        var str = sprintf.apply(null, [fmt].concat(args).filter(Boolean))\n        out.write(pre + name + ': ' + str + '\\n')\n      } else {\n        out.write(pre + name + '\\n')\n      }\n      self.linestate[mon.id] = true\n    })\n  }\n}\n\nPsy.prototype._checkpoint = function (cb) {\n  var self = this\n  if (typeof cb !== 'function') cb = noop\n  var src = JSON.stringify(self.group.list().map(function (e) {\n    return {\n      id: e.id,\n      status: e.status,\n      command: e.command,\n      cwd: e.cwd,\n      env: e.env,\n      maxRestarts: e.maxRestarts,\n      sleep: e.sleep,\n      extra: xtend(e.extra, self.extra[e.id])\n    }\n  }))\n  fs.writeFile(self.statefile, src, cb)\n}\n\nPsy.prototype._ondata = function (mon, buf) {\n  if (!has(this.logging, mon.id)) return\n  var outputs = this.logging[mon.id]\n  outputs.forEach(function (out) { out.write(buf) })\n  this.linestate[mon.id] = buf[buf.length-1] === 10 // \\n\n}\n\nPsy.prototype.list = function (cb) {\n  var self = this\n  var items = self.group.list().map(function (item) {\n    var ref = xtend(item, {})\n    delete ref.domain\n    delete ref.child\n    delete ref._events\n    delete ref._eventsCount\n    delete ref._maxListeners\n    delete ref.timeout\n\n    if (has(self.extra, item.id)) return xtend(ref, self.extra[item.id])\n    else return ref\n  })\n  if (typeof cb === 'function') cb(null, items)\n}\n\nPsy.prototype.start = function (name, command, opts, cb) {\n  var self = this\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  }\n  if (typeof cb !== 'function') cb = noop\n  cb = once(cb)\n\n  var gs = self.group.list()\n  for (var i = 0; i < gs.length; i++) {\n    if (gs[i].id !== name) continue\n    if (gs[i].status === 'running') {\n      return cb(errinfo('A process called ' + JSON.stringify(name)\n        + ' is already running.'))\n    } else {\n      self.group.remove(name, function (err) {\n        if (err) cb(err)\n        else cstart(done)\n      })\n    }\n    return\n  }\n  cstart(done)\n\n  function done (err) {\n    if (err) return cb(err)\n    self._checkpoint(cb)\n  }\n\n  function cstart (cb) {\n    if (!self.extra[name]) self.extra[name] = {}\n    if (opts.logfile && !has(self.logging, name)) {\n      var w = fs.createWriteStream(opts.logfile, { flags: 'a' })\n      w.once('error', cb)\n      self.logging[name] = [ w ]\n      self.linestate[name] = true\n      self.extra[name].logfile = opts.logfile\n    }\n    if (!self.group.get(name)) self.group.add(name, command, opts)\n    self.group.start(name, opts)\n    cb()\n  }\n}\n\nPsy.prototype.stop = function (name, cb) {\n  var self = this\n  self.group.stop(name, function (err) {\n    if (err) return cb(err)\n    self._checkpoint(cb)\n  })\n}\n\nPsy.prototype.restart = function (name, cb) {\n  this.group.restart(name)\n  this._checkpoint(cb)\n}\n\nPsy.prototype.remove = function (name, cb) {\n  this.group.remove(name)\n  this._checkpoint(cb)\n}\n\nPsy.prototype.log = function (name, opts) {\n  var self = this\n  if (!opts) opts = {}\n  if (!has(self.logging, name)) {\n    self.logging[name] = []\n    self.linestate[name] = true\n  }\n  var stream = through()\n  var live = through()\n  if (defined(opts.n, opts.N) !== undefined) {\n    if (self.extra[name] && self.extra[name].logfile) showlines()\n    else if (!opts.follow) stream.end()\n  }\n  if (defined(opts.n, opts.N) === undefined || opts.follow) {\n    self.logging[name].push(live)\n    onend(stream, function () {\n      var ix = self.logging[name].indexOf(live)\n      if (ix >= 0) self.logging[name].splice(ix, 1)\n    })\n    live.pipe(stream)\n  }\n  return stream\n\n  function showlines () {\n    live.pause()\n    var sf = sliceFile(self.extra[name].logfile)\n    var args = []\n    if (/,/.test(opts.n)) {\n      args = opts.n.split(',').map(function (s) {\n        return -Number(s)\n      })\n    } else if (opts.n !== undefined) {\n      args[0] = -opts.n\n    } else if (/,/.test(opts.N)) {\n      args = opts.N.split(',').map(Number)\n    } else {\n      args[0] = opts.N\n    }\n    var s = sf.slice.apply(sf, args)\n    s.on('end', function () {\n      if (self.logging[name].indexOf(live) < 0) {\n        stream.end()\n      } else live.resume()\n    })\n    s.pipe(stream, { end: false })\n  }\n}\n\nPsy.prototype._readState = function (cb) {\n  fs.readFile(this.statefile, 'utf8', function (err, src) {\n    if (err && err.code === 'ENOENT') src = '[]'\n    else if (err) return cb(err)\n\n    try { var state = JSON.parse(src || '[]') }\n    catch (err) { return cb(err) }\n\n    if (!Array.isArray(state)) cb(null, [])\n    else cb(null, state)\n  })\n}\n\nfunction errinfo (msg) {\n  var err = new Error(msg)\n  err.info = msg\n  return err\n}\nfunction noop () {}\n"}